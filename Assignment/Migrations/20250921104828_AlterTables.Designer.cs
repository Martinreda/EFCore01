// <auto-generated />
using System;
using Assignment.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment.Migrations
{
    [DbContext(typeof(ITIDbcontext))]
    [Migration("20250921104828_AlterTables")]
    partial class AlterTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assignment.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicID");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("Assignment.Models.Course_Inst", b =>
                {
                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.Property<int>("inst_Id")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Evaluate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.HasKey("Course_ID", "inst_Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("course_Insts");
                });

            modelBuilder.Entity("Assignment.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HiringDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("mangerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("mangerId")
                        .IsUnique()
                        .HasFilter("[mangerId] IS NOT NULL");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("Assignment.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Bounce")
                        .HasColumnType("float");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<double>("HourRate")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("salary")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("instructors");
                });

            modelBuilder.Entity("Assignment.Models.Stud_Course", b =>
                {
                    b.Property<int>("Stud_Id")
                        .HasColumnType("int");

                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("Stud_Id", "Course_Id");

                    b.HasIndex("Course_Id");

                    b.ToTable("stud_Courses");
                });

            modelBuilder.Entity("Assignment.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("students");
                });

            modelBuilder.Entity("Assignment.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("topics");
                });

            modelBuilder.Entity("Assignment.Models.Course", b =>
                {
                    b.HasOne("Assignment.Models.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("TopicID");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Assignment.Models.Course_Inst", b =>
                {
                    b.HasOne("Assignment.Models.Course", null)
                        .WithMany("course_Insts")
                        .HasForeignKey("CourseId");

                    b.HasOne("Assignment.Models.Instructor", null)
                        .WithMany("course_Insts")
                        .HasForeignKey("InstructorId");
                });

            modelBuilder.Entity("Assignment.Models.Department", b =>
                {
                    b.HasOne("Assignment.Models.Instructor", "manger")
                        .WithOne("MangeDepartment")
                        .HasForeignKey("Assignment.Models.Department", "mangerId");

                    b.Navigation("manger");
                });

            modelBuilder.Entity("Assignment.Models.Instructor", b =>
                {
                    b.HasOne("Assignment.Models.Department", "WorkForDept")
                        .WithMany("instructors")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("WorkForDept");
                });

            modelBuilder.Entity("Assignment.Models.Stud_Course", b =>
                {
                    b.HasOne("Assignment.Models.Course", "Course")
                        .WithMany("stud_Courses")
                        .HasForeignKey("Course_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Models.Student", "Student")
                        .WithMany("stud_Courses")
                        .HasForeignKey("Stud_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Assignment.Models.Student", b =>
                {
                    b.HasOne("Assignment.Models.Department", "Department")
                        .WithMany("students")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Assignment.Models.Course", b =>
                {
                    b.Navigation("course_Insts");

                    b.Navigation("stud_Courses");
                });

            modelBuilder.Entity("Assignment.Models.Department", b =>
                {
                    b.Navigation("instructors");

                    b.Navigation("students");
                });

            modelBuilder.Entity("Assignment.Models.Instructor", b =>
                {
                    b.Navigation("MangeDepartment")
                        .IsRequired();

                    b.Navigation("course_Insts");
                });

            modelBuilder.Entity("Assignment.Models.Student", b =>
                {
                    b.Navigation("stud_Courses");
                });

            modelBuilder.Entity("Assignment.Models.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
